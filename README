This is an IRC bot written in javascript that runs on node.js, here are some notes on getting it
running and how it can be extended:

  Configuration is stored in JSON format under ~/.argh/config.js. The various bits of data used by
  modules and internal stuff is stored under ~/.argh/data/*.js (each JS file containing a JSON
  encoded object for each type of data (ie. one file for .seen records, another for .leavemsg).

  The directory structure is created automatically if it doesnt exist, though the config.js file
  should exist before argh can run. Example config.js:

    {
      "host": "irc.example.com",
      "port": 6667,
      "module_prefix": ".",
      "nicks":    [ "arghh", "arghhh", "arghhhh" ],
      "channels": [ "#foo", "#bar" ],
      "trusted_hosts": [
          "myhostname.example.com",
          "myreggednick.users.quakenet.org"
      ],
      "burstCount":  2,
      "burstPeriod": 3000
    }

  (trusted_hosts is an array with hostnames that are allowed to run 'trusted' modules. the
  burstCount/burstPeriod are for throttling messages, in this case at most 2 messages per 3 seconds
  are allowed)

  An evil irc server/oper could trick argh into doing evil stuff if it changes its hostname into one
  of the trusted hosts since it could then run trusted modules (like maybe .addmodule if/once I
  add that, which would run at the same privelege level as the user argh runs at). Therefore leave
  trusted_hosts empty or properly isolate/jail argh


Adding modules:

  Modules are defined in modules.js, in an object with module names used as index/property, see
  the source for some example modules. A module consists of a single function called when the
  module is invoked and hook functions for hooking into IRC events (for example a message arriving
  on a channel or a user quitting) for data-gathering purposes. 

  The hook and module functions are called with a CommandContext instance used as context object
  (the 'this' value) to provide some convenient functions like 'this.reply("foo")' to reply to the
  user that invoked the module. see argh.js on what is available. Hook functions can't use the
  reply() function though since they don't have an origin (= where a module invocation came from)
  property. But you can send messages from hooks directly through the this.client object.

  In the future i'd like to make it possible to have user-defined modules stored somewhere under
  ~/.argh/ that can be reloaded on the fly, and maybe even adding simple modules over IRC (for
  trusted users of course, module functions are run in the same vm context as the main argh code)

  There is a simple and dumb infrastructure for storing arbitraty data; CommandContext.getData("foo")
  returns a handle to an object, and when exiting (or when saveData()/.savaData is called) this object
  is dumped (as JSON) into ~/.argh/data/foo.js. the parameter to getData can only contain
  alphabetical characters or digits (this is checked before data is dumped to file). getData should
  always return an object, if no data object was loaded by that name on start up, it creates a new
  one.


Most of the core IRC functionality is placed in the irc.js module, here is some quick and dirty (and
soon to be out of date) irc.Client documentation:

  irc.Client events:

    input(msg)
      emitted when a raw protocol message is received from the IRC server

    output(msg)
      emitted when a raw protocol message is sent to the IRC server

    connect(remoteAddress)
      emitted when a connection has been established to the IRC server (before registering)

    register(nickname)
      emitted when registered with the server. nickname is the nick that we registered with.

    channelMessage(channel, sender, message)
      emitted when a message is received on a channel, sender is an object with 'name' (nickname),
      'user', and 'host' properties.

    privateMessage(sender, message)
      emitted when a private message is received, see channelMessage.

    userUpdate(name, type, altName, channel, message)
      emitted when a user joins, leaves or gets kicked from a channel, quits, or changes nickname.
      'type' will be one of: 'join', 'nickchange', 'part', 'kick', 'quit'. This event is also
      emitted for things that happen to the client itself. The meaning of 'altName' depends on type
      (i.e. the new nickname for a 'nickchange' event, or the name of the person that performed a
      kick for the 'kick' event). For some events 'altName', 'channel' or 'message' are unused
      (set to null).

    disconnect(error, message)
      emitted when disconnected. error and message are null unless the disconnection happened due to
      an error condition (i.e. was not requested by client itself).

  irc.Client properties:

    client.nickname:
      the nickname that we ended up with, should only be read, not set

  irc.Client methods:

    client = new irc.Client(options)
      instantiates new client object, options is an object that must have a property 'nicks'
      refering to an array with at least one string to be used as nickname. Optios object cna have
      the following properties, of which the 'nicks' property is the only one required:

        options.timeout:
          How long to wait for certain modules (QUIT) to complete before taking forced action

        options.encoding:
          Encoding to use for the connection, only 'ascii' and 'utf8' are supported for now

        options.username
        options.realname
        options.password

        options.burstCount:
        options.burstPeriod:
          How many messages can be sent at most within some time period (in ms)

        options.pingInterval:
          Time of inactivity after which a PING is sent, to make sure connecten is taken down if it
          has died for some reason

        options.nicks:
          Array of nicknames to try to register with


    client.connect(host, port)
      connect to IRC server at host:port. when this succeeds, the connect event will be emitted.
      does not return a value, if an error occurs during connecting the disconnect event will be
      fired immediately with the appropriate error message/code.

    client.joinChannel(name, key)
    client.leaveChannel(channel, message)
    client.sendToChannel(channel, message)
    client.sendToNickname(name, message)
      ^ should all be obvious, for joinChannel, key is optional. should only be called after the
      register event is emitted

    client.disconnect(message)
      asynchroneously disconnect, using message as quit message. when disconnection is completed
      the 'disconnect' event will be emitted.

    client.lowerCase(string)
      lowercase a string using IRC rules (takes into account server CASEMAPPING setting), should
      probably only be used for nicknames and channel names.

    client.compareName(string)
      compares two names case-independently (also takes into account IRC rules for low/high case
      mapping)

    client.isChannelName(string)
      returns true if string is a valid channel name, else false

